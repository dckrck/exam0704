{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\ztr53\\\\Documents\\\\GitHub\\\\lab10x-roxanazachman01\\\\exam0609\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\ztr53\\\\Documents\\\\GitHub\\\\lab10x-roxanazachman01\\\\exam0609\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { map } from \"rxjs/operators\";\nimport { Client } from \"./client.model\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport var ClientService = /*#__PURE__*/(function () {\n  var ClientService = /*#__PURE__*/function () {\n    function ClientService(httpClient) {\n      _classCallCheck(this, ClientService);\n\n      this.httpClient = httpClient;\n      this.clientsUrl = 'http://localhost:8080/api/clients';\n    }\n\n    _createClass(ClientService, [{\n      key: \"getClients\",\n      value: function getClients() {\n        return this.httpClient.get(this.clientsUrl);\n      }\n    }, {\n      key: \"getClient\",\n      value: function getClient(id) {\n        return this.getClients().pipe(map(function (clients) {\n          return clients.find(function (client) {\n            return client.id === id;\n          });\n        }));\n      }\n    }, {\n      key: \"update\",\n      value: function update(client) {\n        var url = \"\".concat(this.clientsUrl, \"/\").concat(client.id);\n        return this.httpClient.put(url, client);\n      }\n    }, {\n      key: \"save\",\n      value: function save(name, dateofbirth, aid) {\n        var url = \"\".concat(this.clientsUrl);\n        return this.httpClient.post(url, new Client(name, dateofbirth, aid));\n      }\n    }, {\n      key: \"remove\",\n      value: function remove(client) {\n        var url = \"\".concat(this.clientsUrl, \"/\").concat(client.id);\n        return this.httpClient.delete(url);\n      }\n    }]);\n\n    return ClientService;\n  }();\n\n  ClientService.ɵfac = function ClientService_Factory(t) {\n    return new (t || ClientService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ClientService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ClientService,\n    factory: ClientService.ɵfac\n  });\n  return ClientService;\n})();","map":null,"metadata":{},"sourceType":"module"}
